import os
import logging
import asyncio
from flask import Flask, request, jsonify, render_template_string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import threading

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://nimble3tgbot.onrender.com')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
application = Application.builder().token(BOT_TOKEN).build()

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è Web App —Å Telegram Mini Apps SDK
WEBAPP_HTML = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nimble Roulette</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .container {
            text-align: center;
            max-width: 400px;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        h1 {
            margin-bottom: 20px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        .roulette-wheel {
            width: 200px;
            height: 200px;
            border: 8px solid #ffd700;
            border-radius: 50%;
            margin: 20px auto;
            background: conic-gradient(
                #ff0000 0deg 45deg,
                #000000 45deg 90deg,
                #ff0000 90deg 135deg,
                #000000 135deg 180deg,
                #ff0000 180deg 225deg,
                #000000 225deg 270deg,
                #ff0000 270deg 315deg,
                #000000 315deg 360deg
            );
            animation: spin 3s ease-out;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        .balance {
            background: rgba(255, 215, 0, 0.2);
            padding: 15px;
            border-radius: 15px;
            margin: 20px 0;
            border: 2px solid #ffd700;
        }
        .bet-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
        }
        .bet-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: background 0.3s;
        }
        .bet-btn:hover {
            background: #45a049;
        }
        .payment-btn {
            background: #ff9800;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            margin: 10px;
            transition: background 0.3s;
        }
        .payment-btn:hover {
            background: #f57c00;
        }
        .close-btn {
            background: #ff6b6b;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 20px;
            transition: background 0.3s;
        }
        .close-btn:hover {
            background: #ff5252;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé∞ Nimble Roulette</h1>
        <div class="roulette-wheel"></div>
        
        <div class="balance">
            <h3>üí∞ –ë–∞–ª–∞–Ω—Å: <span id="balance">100</span> Stars</h3>
        </div>
        
        <div class="bet-controls">
            <button class="bet-btn" onclick="placeBet(10)">–°—Ç–∞–≤–∫–∞ 10</button>
            <button class="bet-btn" onclick="placeBet(50)">–°—Ç–∞–≤–∫–∞ 50</button>
            <button class="bet-btn" onclick="placeBet(100)">–°—Ç–∞–≤–∫–∞ 100</button>
        </div>
        
        <button class="payment-btn" onclick="buyStars()">üíé –ö—É–ø–∏—Ç—å Stars</button>
        <button class="payment-btn" onclick="withdrawStars()">üí∏ –í—ã–≤–µ—Å—Ç–∏ Stars</button>
        
        <button class="close-btn" onclick="closeWebApp()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>

    <script>
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mini App
        tg.MainButton.setText('üé∞ –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É');
        tg.MainButton.show();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        tg.MainButton.onClick(() => {
            spinRoulette();
        });
        
        let balance = 100;
        
        function updateBalance() {
            document.getElementById('balance').textContent = balance;
        }
        
        function placeBet(amount) {
            if (balance >= amount) {
                balance -= amount;
                updateBalance();
                tg.showAlert(`–°—Ç–∞–≤–∫–∞ ${amount} Stars –ø—Ä–∏–Ω—è—Ç–∞!`);
            } else {
                tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars!');
            }
        }
        
        function spinRoulette() {
            const result = Math.floor(Math.random() * 37); // 0-36
            const win = Math.random() > 0.5; // 50% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞
            
            if (win) {
                const winAmount = Math.floor(Math.random() * 200) + 50;
                balance += winAmount;
                tg.showAlert(`üéâ –í—ã–∏–≥—Ä—ã—à! +${winAmount} Stars`);
            } else {
                tg.showAlert('üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
            }
            
            updateBalance();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
            tg.sendData(JSON.stringify({
                action: 'roulette_result',
                result: result,
                win: win,
                balance: balance
            }));
        }
        
        function buyStars() {
            tg.showPopup({
                title: 'üíé –ö—É–ø–∏—Ç—å Stars',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –ø–æ–∫—É–ø–∫–∏',
                buttons: [
                    {text: '100 Stars - $1', type: 'buy'},
                    {text: '500 Stars - $5', type: 'buy'},
                    {text: '1000 Stars - $10', type: 'buy'},
                    {text: '–û—Ç–º–µ–Ω–∞', type: 'cancel'}
                ]
            });
        }
        
        function withdrawStars() {
            if (balance > 0) {
                tg.showPopup({
                    title: 'üí∏ –í—ã–≤–µ—Å—Ç–∏ Stars',
                    message: `–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${balance} Stars`,
                    buttons: [
                        {text: '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ', type: 'withdraw'},
                        {text: '–û—Ç–º–µ–Ω–∞', type: 'cancel'}
                    ]
                });
            } else {
                tg.showAlert('–ù–µ—Ç Stars –¥–ª—è –≤—ã–≤–æ–¥–∞!');
            }
        }
        
        function closeWebApp() {
            tg.close();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç Telegram
        tg.onEvent('popupClosed', () => {
            console.log('Popup closed');
        });
        
        tg.onEvent('mainButtonClicked', () => {
            spinRoulette();
        });
    </script>
</body>
</html>
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç: {update.effective_user.first_name}")
    
    username = update.effective_user.first_name
    chat_id = update.effective_chat.id
    
    welcome_message = f"""üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Nimble Roulette*, {username}! üé∞

üé≤ –ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É!

üéÆ *Nimble Roulette* - —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞ —Å Telegram Stars!
üíé –ü–æ–∫—É–ø–∞–π—Ç–µ Stars, –¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!"""

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Web App —Å WebAppInfo
    webapp_button = InlineKeyboardButton(
        text="üéÆ –û—Ç–∫—Ä—ã—Ç—å Nimble Roulette",
        web_app=WebAppInfo(url=WEBAPP_URL)
    )
    
    keyboard = InlineKeyboardMarkup([[webapp_button]])
    
    try:
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Web App –¥–∞–Ω–Ω—ã—Ö
async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
    logger.info("üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App")
    chat_id = update.effective_chat.id
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
        web_app_data = update.message.web_app_data.data
        import json
        data = json.loads(web_app_data)
        
        if data.get('action') == 'roulette_result':
            result = data.get('result')
            win = data.get('win')
            balance = data.get('balance')
            
            if win:
                await update.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n"
                    f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} Stars"
                )
            else:
                await update.message.reply_text(
                    f"üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n"
                    f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} Stars"
                )
        else:
            await update.message.reply_text("üéâ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.initialize()
        await application.start()
        await application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Web App"""
    return WEBAPP_HTML

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        update = Update.de_json(request.get_json(), application.bot)
        asyncio.create_task(application.process_update(update))
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"status": "error"}), 500

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({"status": "healthy", "bot": "running"})

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_bot_thread():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def run_bot_sync():
        asyncio.run(run_bot())
    
    bot_thread = threading.Thread(target=run_bot_sync, daemon=True)
    bot_thread.start()
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot_thread()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False) 